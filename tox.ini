[tox]
minversion = 2.0
# 默认情况下，tox 会对当前项目执行 `python setup.py install` 以安装到 virtualenv 中，
# 这包含了 `python setup.py sdist` 打包操作，对于大一些的项目，这会是一个费时的过程。当
# 我们在调试代码并频繁执行单元测试的时候，我们不会想要每次都跑一遍打包操作。
skipsdist = True
envlist = py35,py27,pep8

[testenv]
# testenv 是默认配置，如果某个配置在环境专属的 section 中没有，就从这个 section 中读取.
# 默认情况下，tox 只会将 PATH 环境变量从tox调用传递到测试环境。如果你想传递额外的环境变
# passenv = *
passenv = *_proxy *_PROXY
install_command = pip install -U {opts} {packages}
setenv = PYTHONPATH={toxinidir}/
         VIRTUAL_ENV={envdir}
         PYTHONHASHSEED=0
         PYTHONWARNINGS=default::DeprecationWarning
# usedevelop 表示安装 virtualenv 的时候，本项目自己的代码采用开发模式安装
# `python setup.py develop`，也就是不会拷贝代码到 virtualenv 目录中，只是做个链接.
usedevelop = True
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
commands =
  find . -type f -name "*.pyc" -delete
  py.test --cov-config .coveragerc \
    --cov=eagle --cov-report=xml \
    --junitxml=junit-{envname}.xml
#  ostestr {posargs} 不带任何参数，则会用cpu数目的runner来执行测试用例

# 默认情况下，在 virtualenv 中不能使用外部安装的命令，这本来是为了命令环境的隔离.
# 想要使用外部命令/工具, 使用 whitelist_externals 配置
whitelist_externals =
  bash
  find

[pytest]
testpaths = eagle/tests
addopts = --maxfail=2 -rf

[testenv:pep8]
commands = flake8 eagle

[flake8]
# Following checks are ignored on purpose.
#
# E251 unexpected spaces around keyword / parameter equals
# reason: no improvement in readability
ignore = E251
# H904 Delay string interpolations at logging calls.
enable-extensions = H106,H203,H904
exclude = .git,.venv,.tox,dist,tools,doc/ext,*egg,build
max-complexity=30

[testenv:cover]
commands =
  py.test --cov=eagle --cov-report=xml --cov-config=.coveragerc
#  python setup.py testr --coverage \
#    --testr-args='^(?!.*test.*coverage).*$'
#  coverage report 覆盖率数据已记录在.coverage文件中(由coverage run test_x.py产生),
# 该命令用来查看覆盖率数据. coverage combine: 合并多个测试用例覆盖率报告